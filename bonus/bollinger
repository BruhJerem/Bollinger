#!/bin/python3
import sys
from math import sqrt
from functools import reduce
import matplotlib.pyplot as plt
from numpy import arange

def aff_h_func():
    _h = open("../h_file.txt", "r")
    _array = _h.read().split('\n')
    for _line in _array:
        print (_line)


def isfloat(value):
    try:
        float(value)
        return True

    except ValueError:
        return False


def is_int(value):
        try:
            int(value)
            return True

        except ValueError:
            return False


def check_input():
    _sd = sys.argv[2]
    _index = sys.argv[4]
    _period = sys.argv[1]
    if not _period.isdigit():
        print("Period must be digital")
        exit(84)
    if not _index.isdigit():
        print("Index must be digital")
        exit(84)
    if not isfloat(_sd) and not is_int(_sd):
        print("SD must be float or int")
        exit(84)
    if sys.argv[1] > sys.argv[4]:
        print("Period can't be bigger than Index")
        exit(84)


def input_function():
    print("INPUT")
    print("Index:", sys.argv[4])
    print("Period:", sys.argv[1])
    print("SD_coef: %.2f" % float(sys.argv[2]))


def ma_calculator(_arr):
    _res = 0.0
    _index = float(sys.argv[4])
    _period = float(sys.argv[1])
    for i in range(int(_index) + 1 - int(_period), int(_index) + 1):
        _res += _arr[i]
    return _res / _period


def sd_calculator(_arr):
    _res = 0.0
    _index = float(sys.argv[4])
    _period = float(sys.argv[1])
    for i in range(int(_index) + 1 - int(_period), int(_index) + 1):
        _res += (float(_arr[i])-ma_calculator(_arr))**2
    return sqrt(1/_period) * _res


def bp_calculator(_arr):
    _res = float(ma_calculator(_arr)) + float(sd_calculator(_arr) * float(sys.argv[2]))
    return _res


def bl_calculator(_arr):
    _res = float(ma_calculator(_arr)) - float(sd_calculator(_arr) * float(sys.argv[2]))
    return _res


def output_func(_file, _arr):
    print("\nOUTPUT")
    print("MA: %.2f" % ma_calculator(_arr))
    print("SD: %.2f" % sd_calculator(_arr))
    print("B+: %.2f" % bp_calculator(_arr))
    print("B-: %.2f" % bl_calculator(_arr))


def get_arr_day(nb):

    arr = []
    a = 1
    for i in range(nb):
        arr.append(a)
        a = a + 1
    return arr


def get_index_ma(_arr):
    arr = []
    a = int(sys.argv[1])
    for i in range(int(sys.argv[1]), len(_arr)):
        arr.append(a)
        a = a + 1
    return arr


def get_ma_for_arr(_arr):
    _res = 0.0
    _period = float(sys.argv[1])
    _index = _period
    arr = []
    for j in range(int(_period), len(_arr)):
        for i in range(int(_index) + 1 - int(_period), int(_index) + 1):
            _res += float(_arr[i])
        arr.append(_res / _period)
        _index += 1.0
        _res = 0.0
    return arr


def get_sd_arr(_arr, _arr_index_ma):
    arr = []
    _res = 0.0
    _period = float(sys.argv[1])
    _index = _period
    for j in range(len(_arr_index_ma)):
        for i in range(int(_index) + 1 - int(_period), int(_index) + 1):
            _res += (float(_arr[i])-ma_calculator(_arr))**2
        square = (1/_period) * _res
        arr.append(sqrt(square))
        _res = 0.0
        _index += 1.00
    return arr


def get_index_plus(_arr_ma, _arr_sd):
    arr = []
    for j in range(len(_arr_ma)):
        _res = float(_arr_ma[j] + _arr_sd[j] * float(sys.argv[2]))
        arr.append(_res)
    return arr


def get_index_minus(_arr_ma, _arr_sd):
    arr = []
    for j in range(len(_arr_ma)):
        _res = float(_arr_ma[j] - _arr_sd[j] * float(sys.argv[2]))
        arr.append(_res)
    return arr


def graphical_func(_arr):

    plt.grid(True)
    arr_nb_days = get_arr_day(len(_arr))
    _arr_ma = get_ma_for_arr(_arr)
    _arr_index_ma = get_index_ma(_arr)
    _arr_sd = get_sd_arr(_arr, _arr_index_ma)
    _arr_index_plus = get_index_plus(_arr_ma, _arr_sd)
    _arr_index_minus = get_index_minus(_arr_ma, _arr_sd)
    plt.plot(arr_nb_days, _arr, "b", linewidth=0.8, label="Index in File")
    plt.plot(_arr_index_ma, _arr_ma, "r", linewidth=0.8, label="MA")
    plt.plot(_arr_index_ma, _arr_index_plus, "g", linewidth=0.8, label="B+")
    plt.plot(_arr_index_ma, _arr_index_minus, "k", linewidth=0.8, label="B-")
    plt.title("Bollinger Graphical")
    plt.xlabel('Days')
    plt.ylabel('Index')
    plt.legend()
    plt.show()


def main():
    if sys.argv[1] == "-h" and len(sys.argv) == 2:
        aff_h_func()
    elif len(sys.argv) == 5:
        check_input()
        input_function()
        _file = open(sys.argv[3]).readlines()
        _arr = []
        for element in _file:
            _arr.append(float(element))
        output_func(_file, _arr)
        graphical_func(_arr)


if __name__ == '__main__':
        main()
